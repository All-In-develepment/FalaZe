"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/extensions */
const fs_1 = __importDefault(require("fs"));
const q_1 = __importDefault(require("q"));
const https_1 = __importDefault(require("https"));
const axios_1 = __importDefault(require("axios"));
const gn_auth_1 = __importDefault(require("./gn-auth"));
const package_json_1 = __importDefault(require("../package.json"));
class GnEndpoints {
    constructor(options, constants) {
        this.options = options;
        this.constants = constants;
    }
    run(name, params, body) {
        this.defer = q_1.default.defer();
        if (Object.keys(this.constants.ENDPOINTS.PIX).includes(name)) {
            try {
                this.certificate = fs_1.default.readFileSync(this.options.pathCert);
                this.agent = new https_1.default.Agent({
                    pfx: this.certificate,
                    passphrase: '',
                });
            }
            catch (error) {
                throw new Error(`FALHA AO LER O CERTIFICADO: \n${error}`);
            }
            this.endpoint = this.constants.ENDPOINTS.PIX[name];
            this.options.baseUrl = this.options.sandbox
                ? this.constants.URL.PIX.sandbox
                : this.constants.URL.PIX.production;
        }
        else {
            this.endpoint = this.constants.ENDPOINTS.DEFAULT[name];
            this.options.baseUrl = this.options.sandbox
                ? this.constants.URL.DEFAULT.sandbox
                : this.constants.URL.DEFAULT.production;
        }
        this.body = body;
        this.params = [params];
        this.getAccessToken().then(this.directReq.bind(this));
        return this.defer.promise;
    }
    getAccessToken() {
        const self = this;
        const gnAuth = new gn_auth_1.default(this.options, this.constants);
        return gnAuth
            .getAccessToken()
            .then((response) => {
            self.accessToken = response.access_token;
            return response.access_token;
        })
            .catch((err) => {
            return err;
        });
    }
    req(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const req = this.getParams.call(this, this.endpoint.route);
            req.method = this.endpoint.method;
            axios_1.default(req)
                .then((res) => {
                callback(res);
            })
                .catch((error) => {
                callback(error);
            });
        });
    }
    directReq() {
        this.req(this.directReqCallback.bind(this));
    }
    directReqCallback(rawResponse) {
        if (rawResponse.data) {
            if (rawResponse.status < 300) {
                if (rawResponse.data.data) {
                    this.defer.resolve(rawResponse.data.data);
                }
                else {
                    this.defer.resolve(rawResponse.data);
                }
            }
            else {
                this.defer.reject(rawResponse.data);
            }
        }
        else if (rawResponse.response && rawResponse.response.data) {
            this.defer.reject(rawResponse.response.data);
        }
    }
    getParams(route) {
        // eslint-disable-next-line no-useless-escape
        const regex = /\:(\w+)/g;
        let query = '';
        const placeholders = route.match(regex) || [];
        const params = {};
        if (this.params) {
            this.params.forEach((obj) => {
                if (obj) {
                    Object.entries(obj).forEach((entrie) => {
                        // eslint-disable-next-line prefer-destructuring
                        params[entrie[0]] = entrie[1];
                    });
                }
            });
        }
        const getVariables = () => {
            return placeholders.map((item) => {
                return item.replace(':', '');
            });
        };
        const updateRoute = () => {
            const variables = getVariables();
            variables.forEach((value, index) => {
                if (params[value]) {
                    // eslint-disable-next-line no-param-reassign
                    route = route.replace(placeholders[index], params[value]);
                    delete params[value];
                }
            });
        };
        const getQueryString = () => {
            const keys = Object.keys(params);
            const initial = keys.length >= 1 ? '?' : '';
            return keys.reduce((previous, current, index, array) => {
                const next = index === array.length - 1 ? '' : '&';
                return [previous, current, '=', params[current], next].join('');
            }, initial);
        };
        updateRoute();
        query = getQueryString();
        const headers = {
            'api-sdk': `typescript-${package_json_1.default.version}`,
            'Content-Type': 'application/json',
            authorization: `Bearer ${this.accessToken}`,
        };
        headers['x-skip-mtls-checking'] = !this.options.validateMtls;
        if (this.options.partnerToken) {
            headers['partner-token'] = this.options.partnerToken;
        }
        const req = {
            url: [this.options.baseUrl, route, query].join(''),
            headers,
            data: this.body,
        };
        if (this.constants.URL.PIX.production === this.options.baseUrl ||
            this.constants.URL.PIX.sandbox === this.options.baseUrl) {
            req.httpsAgent = this.agent;
        }
        return req;
    }
}
exports.default = GnEndpoints;

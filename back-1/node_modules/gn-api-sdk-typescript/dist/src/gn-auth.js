"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/extensions */
/* eslint-disable import/no-unresolved */
const fs_1 = __importDefault(require("fs"));
const axios_1 = __importDefault(require("axios"));
const https_1 = __importDefault(require("https"));
const package_json_1 = __importDefault(require("../package.json"));
class GnAuth {
    constructor(options, constants) {
        this.constants = constants;
        this.clientId = options.clientId;
        this.clientSecret = options.clientSecret;
        this.pathCert = options.pathCert;
        this.baseUrl = options.baseUrl;
    }
    getAccessToken() {
        let postParams;
        // eslint-disable-next-line prettier/prettier
        if (this.constants.URL.PIX.production === this.baseUrl || this.constants.URL.PIX.sandbox === this.baseUrl) {
            try {
                this.certificate = fs_1.default.readFileSync(this.pathCert);
            }
            catch (error) {
                throw new Error('FALHA AO LER O CERTIFICADO');
            }
            const dataCredentials = `${this.clientId}:${this.clientSecret}`;
            const auth = Buffer.from(dataCredentials).toString('base64');
            const agent = new https_1.default.Agent({
                pfx: this.certificate,
                passphrase: '',
            });
            postParams = {
                method: 'POST',
                url: this.baseUrl + this.constants.ENDPOINTS.PIX.authorize.route,
                headers: {
                    Authorization: `Basic ${auth}`,
                    'Content-Type': 'application/json',
                    'api-sdk': `typescript-${package_json_1.default.version}`,
                },
                httpsAgent: agent,
                data: {
                    grant_type: 'client_credentials',
                },
            };
        }
        else {
            postParams = {
                method: 'POST',
                url: String(this.baseUrl + this.constants.ENDPOINTS.DEFAULT.authorize.route),
                auth: {
                    username: this.clientId,
                    password: this.clientSecret,
                },
                data: {
                    grant_type: 'client_credentials',
                },
                headers: {
                    'api-sdk': `typescript-${package_json_1.default.version}`,
                },
            };
        }
        const response = axios_1.default(postParams)
            .then((res) => {
            return res.data;
        })
            .catch((error) => {
            return error;
        });
        return response;
    }
}
exports.default = GnAuth;
